#
# GRAKN.AI - THE KNOWLEDGE GRAPH
# Copyright (C) 2018 Grakn Labs Ltd
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

# This provides keeps a variety of configs which should not be exposed or configurable to the user,
# but are still required when initialising Janus Based DBs.
# Note: That these default configs can be overwritten at runtime

##############################################################################################
############################### Cassandra Configuration ######################################
##############################################################################################

storage.backend=cql

##############################################################################################
############################# Configuration Needed For Analytics #############################
##############################################################################################

# Janus InputFormat configuration for using hadoop
# Not clear why these need to be set. See http://stackoverflow.com/questions/38524151/counting-vertices-on-a-titan-graph-using-sparkgraphcomputer-throws-org-apache-sp/38529076
# for more information.
# These two properties should be equal to the value of storage.backend and storage.hostname, respectively.
janusgraphmr.ioformat.conf.storage.backend=cql
janusgraphmr.ioformat.cf-name=edgestore


# Cassandra InputFormat configuration
cassandra.input.partitioner.class=org.apache.cassandra.dht.Murmur3Partitioner

#################################################################################
############################# Gremlin Configuration #############################
#################################################################################

# Class that gremlin injects as a graph on which to run analytics
gremlin.graph=org.apache.tinkerpop.gremlin.hadoop.structure.HadoopGraph
# Input API implementation on the graph. If the janus or graph backend is changed, this should change accordingly.
gremlin.hadoop.graphReader=org.janusgraph.hadoop.formats.cql.CqlInputFormat
# Output API implementation on the graph
gremlin.hadoop.graphWriter=org.apache.tinkerpop.gremlin.hadoop.structure.io.gryo.GryoOutputFormat
# If the classpath has been provided on the remote machine
gremlin.hadoop.jarsInDistributedCache=true
# Where the results of operations are stored.
# gremlin.hadoop.outputLocation=/test/output
gremlin.hadoop.outputLocation=output
gremlin.hadoop.inputLocation=none
#This property set to true helps in getting follow-up OLAP queries answered faster, http://tinkerpop.apache.org/docs/current/reference/#sparkgraphcomputer
gremlin.spark.persistContext=true

###############################################################################
############################# Spark Configuration #############################
###############################################################################
spark.master=local[*]
spark.serializer=org.apache.spark.serializer.KryoSerializer
spark.kryo.registrator=org.apache.tinkerpop.gremlin.spark.structure.io.gryo.GryoRegistrator
spark.ui.showConsoleProgress=false
spark.ui.enabled=false